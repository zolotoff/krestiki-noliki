package com.company;


import java.util.Arrays;
import java.util.Scanner;

public class Main {
    /**
     * Это блок настроек игры крестики-нолики - игру, которую я пробую писать самостоятельно.
     *
     * @param args
     */
    private static final char pustaya = '•'; //пустая клетка
    private static final char krestik = 'X';
    private static final char nolik = 'O';
    private static char[][] pole_igry;
    private static boolean status=true; //true "в игре"; false - "игра окончена"
    private static int razmer = 3; //ширина и высота игрового поля
    private static int [][] rating;
    private static int [] hod;

    public static void main(String[] args) {
        // write your code here
        zapolnenie();
        while (status) {


            vyvod_igrovogo_polya(pole_igry);
            hod_cheloveka();
            proverka_na_viigrysh(pole_igry);
            int[][] rating=analiz_yacheek(pole_igry);
            hod_umnogo_computera(rating, pole_igry);
           // hod_computera(); //для выполнения рандомных ходов компьютера раскомментировать
            proverka_na_viigrysh(pole_igry);

        }




    }


    private static void vyvod_igrovogo_polya(char[][] pole_igry) {
        System.out.println("Поле игры ");
        System.out.println("X>1 2 3");

        for (int i = 0; i < razmer; i++) {
            System.out.print((i + 1) + " ");
            for (int j = 0; j < razmer; j++) {

                System.out.print(pole_igry[i][j]);
            }
            System.out.println();
        }
        System.out.println("Y");
    }

    private static void zapolnenie() {
        pole_igry = new char[razmer][razmer];
        for (int i = 0; i < razmer; i++) {
            for (int j = 0; j < razmer; j++) {
                pole_igry[i][j] = pustaya;
            }
        }

    }

    private static void hod_cheloveka() {

        int x;
        int y;
        do {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Введите координаты ячейки X и Y через пробел");
            x = scanner.nextInt() - 1;
            y = scanner.nextInt() - 1;

        } while (!proverka_na_validnost(x, y));
        pole_igry[y][x] = krestik;
    }

    /**
     * Здесь должна быть реализована тактика "умного" хода компьютера.
     * Компьютер будет анализировать ячейки и делать ход в зависимости от приоритетности
     * выбранной ячейки.
     *
     * @param pole_igry
     */
    private static void hod_umnogo_computera(int[][] rating, char[][] pole_igry) {


        int[] chislo = new int[9]; //формируем новый массив "число", чтобы затем вычленить максимальное значение ячеек из массива "рейтинг"
        int n=0;
        for (int i=0; i<razmer; i++){
            for (int j=0; j<razmer; j++) {

                chislo[n]= rating[i][j];
                n=n+1;
            }
        }




//делаем сортировку массива chislo (в сторону возрастания)
        for(int i = chislo.length-1 ; i > 0 ; i--){
            for(int j = 0 ; j < i ; j++){
            /*Сравниваем элементы попарно,
              если они имеют неправильный порядок,
              то меняем местами */
                if( chislo[j] > chislo[j+1] ){
                    int tmp = chislo[j];
                    chislo[j] = chislo[j+1];
                    chislo[j+1] = tmp;
                }
            }
        }



        int Xmax = chislo[8]; //задаём переменную, равную максимальному значению массива.



// вычисляем положение ячеек, при которых значение рейтинга является максимальным
        int l=0;
        int t=0;
        for (int i=0; i<razmer; i++){
            for (int j=0; j<razmer; j++) {
                if (rating[j][i]==Xmax){l=i; t=j;
                };
            }
        };

        int x;
        int y;
        int ch=0;
        do {

            x = l;
            y = t;
            if (ch >= 1 && ch<10) { //если не подходят выбранные значения x и y, подбираем другие, прокручивая массивы и получая новые значения.

                Xmax = chislo[chislo.length-ch]; //переходим к более низкому значению рейтинга ячейки

String intArrayString = Arrays.toString(chislo);
System.out.print("ch=" + ch+"; Xmax=" +Xmax); System.out.println(intArrayString);;


// вычисляем положение ячеек, при которых значение рейтинга является максимальным

                for (int i=0; i<razmer; i++){
                    for (int j=0; j<razmer; j++) {
                        if (rating[i][j]==Xmax){l=i; t=j;
                        };
                    }
                };

                x=l;
                y=t;
                int zn1=x+1;
                int zn2=y+1;
                System.out.print("X=" + zn1 + "; y=" + zn2);
                System.out.println();


            }
            if (ch>10) {System.out.println("компьютер может перезаписать ячейку"); break;};
            ch= ch+1;

        } while (!proverka_na_validnost(x, y));

        pole_igry[y][x]=nolik;


    }



    private static boolean proverka_na_viigrysh(char[][] pole_igry) {
        status = true;
        // верхний ряд элементов массива a b c
        char a = pole_igry[0][0];
        char b = pole_igry[0][1];
        char c = pole_igry[0][2];

        //средний ряд элементов массива d e f
        char d = pole_igry[1][0];
        char e = pole_igry[1][1];
        char f = pole_igry[1][2];
        // нижний ряд элементов массива g h k
        char g = pole_igry[2][0];
        char h = pole_igry[2][1];
        char k = pole_igry[2][2];

      int ok=0;

        if (
                (a == b && a == c && a != pustaya) || (d == e && d == f && d != pustaya) || (g == h && g == k && g != pustaya) ||
                        (a == d && a == g && a != pustaya) || (b == e && b == h && b != pustaya) || (c == f && c == k && c != pustaya) ||
                        (a == e && a == k && a != pustaya) || (c == e && c == g && c != pustaya)
        ) {
            System.out.println("Игра окончена");



            /*
             *   a b c
             *   d e f
             *   g h k
             * вычисляем выигрыш крестиков
             */

            if (((a == krestik) && (b == krestik) && (c ==krestik )) || ((d == krestik) && (e == krestik) && (f ==krestik )) || ((g == krestik) && (h == krestik) && (k ==krestik )) ||
                    ((a == krestik) && (d == krestik) && (g ==krestik )) || ((b == krestik) && (e == krestik) && (h ==krestik )) || ((c ==krestik ) && (f == krestik) && (k == krestik))  ||
                    ((a == krestik) && (e == krestik) && (k ==krestik )) ||((c == krestik) && (e == krestik) && (g ==krestik )))  {System.out.println("Выиграли Х");  };
            ;

            // а затем проверяем выигрыш ноликов
            if (((a == nolik) && (b == nolik) && (c ==nolik )) || ((d == nolik) && (e == nolik) && (f ==nolik )) || ((g == nolik) && (h == nolik) && (k ==nolik )) ||
                    ((a == nolik) && (d == nolik) && (g ==nolik )) || ((b == nolik) && (e == nolik) && (h ==nolik )) || ((c ==nolik ) && (f == nolik) && (k == nolik))  ||
                    ((a == nolik) && (e == nolik) && (k ==nolik )) ||((c == nolik) && (e == nolik) && (g ==nolik )))  {System.out.println("Выиграли O");
            };
            //


            status = false;

            vyvod_igrovogo_polya(pole_igry);

        }

        return status;
    }

/*  Здесь закомментирован рандомный ход компьютера. Для запуска раскомментировать этот и закомментировать "умный" ход компьютера
  private static void hod_computera() {
        int x = -1;
        int y=-1;
            do {
            x = (int) Math.round(Math.random() * 2);
            y = (int) Math.round(Math.random() * 2);
        } while (proverka_na_validnost(x, y));
        System.out.println("Компьютер выбрал ячейку" + (x + 1) + " " + (y + 1));
        pole_igry[y][x] = nolik;
    }
*/


    private static int[][] analiz_yacheek(char[][] pole_igry) {
            int[][] rating;
            rating = new int[razmer][razmer];
            /*       /**
             * заполняем массив rating нулями;
             */
        for (int i = 0; i < razmer; i++) {
            for (int j = 0; j < razmer; j++) {
                rating[i][j]=0;
            }
        }



        // верхний ряд элементов массива a b c
        char a = pole_igry[0][0];
        char b = pole_igry[0][1];
        char c = pole_igry[0][2];

        //средний ряд элементов массива d e f
        char d = pole_igry[1][0];
        char e = pole_igry[1][1];
        char f = pole_igry[1][2];
        // нижний ряд элементов массива g h k
        char g = pole_igry[2][0];
        char h = pole_igry[2][1];
        char k = pole_igry[2][2];
        /*
         *   a b c
         *   d e f
         *   g h k
         * вычисляем рейтинг ячейки a
         */

        /* Если в одном ряду с ячейкой "a" есть Х по горизонтали, вертикали и диагонали, присваиваем ячейке a ранг -1 */
        if ((a == 'X' || b == 'X' || c == 'X') && (a == 'X' || d == 'X' || g == 'X') && (a == 'X' || e == 'X' || k == 'X')) {
            rating[0][0] = -1;
        }
        ;
        /* Если в одном ряду с ячейкой "a" есть Х по горизонтали и вертикали, но не по диагонали, присваиваем ячейке a ранг 1 */
        if ((a == 'X' || b == 'X' || c == 'X') && (a == 'X' || d == 'X' || g == 'X') && !(a == 'X' || e == 'X' || k == 'X')) {
            rating[0][0] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "a" есть Х по горизонтали и диагонали, но не по вертикали присваиваем ячейке a ранг 1 */
        if ((a == 'X' || b == 'X' || c == 'X') && !(a == 'X' || d == 'X' || g == 'X') && (a == 'X' || e == 'X' || k == 'X')) {
            rating[0][0] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "a" есть Х по диагонали и вертикали, но не по диагонали, присваиваем ячейке a ранг 1 */
        if (!(a == 'X' || b == 'X' || c == 'X') && (a == 'X' || d == 'X' || g == 'X') && (a == 'X' || e == 'X' || k == 'X')) {
            rating[0][0] = 1;
        }

        /* Если в одном ряду с ячейкой "a" есть Х по диагонали, или вертикали, или по диагонали, присваиваем ячейке a ранг 2 */
        if ((a == 'X' || b == 'X' || c == 'X') || (a == 'X' || d == 'X' || g == 'X') || (a == 'X' || e == 'X' || k == 'X')) {
            rating[0][0] = 2;
        }
        /* Если в одном ряду с ячейкой "a" нет Х ни по диагонали, ни по вертикали, ни по по диагонали, присваиваем ячейке a ранг 3*/
        if (!(a == 'X' || b == 'X' || c == 'X') && !(a == 'X' || d == 'X' || g == 'X') && !(a == 'X' || e == 'X' || k == 'X')) {
            rating[0][0] = 3;
        }
        ;

        /* Если в одном ряду с ячейкой "a" есть два Х по диагонали, либо по вертикали, либо по горизонтали, присваиваем ячейке a ранг 4*/
        if (((b == 'X' && c == 'X') || (d == 'X' && g == 'X') || (e == 'X' && k == 'X')) && (a == pustaya)) {
            rating[0][0] = 4;
        }
        /* Если в одном ряду с ячейкой "a" есть два 'O' по диагонали, либо по вертикали, либо по горизонтали, присваиваем ячейке a ранг 5*/
        if (((b == nolik  && c == nolik) || (d == nolik && g == nolik) || (e == nolik && k == nolik)) && (a == pustaya)){
            rating[0][0] = 5;
        }




        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки b
         */

        ;


        ;
        /* Если в одном ряду с ячейкой "b" есть Х по горизонтали, и вертикали,  присваиваем ячейке "b" ранг -1 */
        if ((c == 'X' || a == 'X' || b == 'X') && (c == 'X' || f == 'X' || k == 'X')) {
            rating[0][1] = -1;
        }
        ;
        /* Если в одном ряду с ячейкой "b" есть Х по горизонтали, или вертикали,  присваиваем ячейке "b" ранг 1 */
        if ((a == 'X' || c == 'X' ||  b == 'X') || (e == 'X' || h == 'X' ||  b == 'X'))  {
            rating[0][1] = 1;
        }
        /* Если в одном ряду с ячейкой "b" нет Х ни по горизонтали, ни по вертикали,  присваиваем ячейке "b" ранг 2 */
        if (!(b == 'X' || a == 'X' || c == 'X') && !(b == 'X' || e == 'X' || h == 'X'))  {
            rating[0][1] = 2;
        }

        /* Если в одном ряду с ячейкой "b" есть два Х по вертикали, либо по горизонтали, присваиваем ячейке b ранг 4*/
        if (((a == 'X' && c == 'X') || (e == 'X' && h == 'X')) && (b==pustaya))  {
            rating[0][1] = 4;
        }
        /* Если в одном ряду с ячейкой "b" есть два 'O' по вертикали, либо по горизонтали, присваиваем ячейке b ранг 5*/
        if (((a == nolik && c == nolik) || (e == nolik && h == nolik)) && (b==pustaya)) {
            rating[0][1] = 5;
        }


        ;




        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки c
         */
        /* Если в одном ряду с ячейкой "c" есть два Х по вертикали, либо по горизонтали, либо по диагонали, присваиваем ячейке c ранг 4*/



        ;
        /* Если в одном ряду с ячейкой "c" есть Х по горизонтали, вертикали и диагонали, присваиваем ячейке c ранг -1 */
        if ((a == 'X' || b == 'X' || c == 'X') && (c == 'X' || f == 'X' || k == 'X') && (c == 'X' || e == 'X' || g == 'X')) {
            rating[0][2] = -1;
        }
        ;
        /* Если в одном ряду с ячейкой "c" есть Х по горизонтали и вертикали, но не по диагонали, присваиваем ячейке c ранг 1 */
        if ((a == 'X' || b == 'X' || c == 'X') && (c == 'X' || f == 'X' || k == 'X') && !(c == 'X' || e == 'X' || g == 'X')) {
            rating[0][2] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "c" есть Х по горизонтали и диагонали, но не по вертикали присваиваем ячейке c ранг 1 */
        if ((a == 'X' || b == 'X' || c == 'X') && !(c == 'X' || f == 'X' || k == 'X') && (c == 'X' || e == 'X' || g == 'X')) {
            rating[0][2] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "c" есть Х по диагонали и вертикали, но не по горизонтали, присваиваем ячейке c ранг 1 */
        if (!(a == 'X' || b == 'X' || c == 'X') && (c == 'X' || f == 'X' || k == 'X') && (c == 'X' || e == 'X' || g == 'X')){
            rating[0][2] = 1;
        }
        /* Если в одном ряду с ячейкой "c" есть Х по диагонали или вертикали, или по горизонтали, присваиваем ячейке c ранг 2 */
        if ((a == 'X' || b == 'X' || c == 'X' ) || (f == 'X' || k == 'X' || c == 'X') || ( e == 'X' || g == 'X' || c == 'X')) {
            rating[0][2] = 2;
        }
        /* Если в одном ряду с ячейкой "c" нет Х ни по диагонали, ни по вертикали, ни по горизонтали, присваиваем ячейке c ранг 3 */
        if (!(a == 'X' || b == 'X' || c == 'X') && !(c == 'X' || f == 'X' || k == 'X') && !(c == 'X' || e == 'X' || g == 'X')){
            rating[0][2] = 3;
        }
        ;
        if (((a == 'X' && b == 'X') || (f == 'X' && k == 'X') || (e == 'X' && g == 'X')) && (c==pustaya)) {
            rating[0][2] = 4;
        }
        /* Если в одном ряду с ячейкой "c" есть два O по вертикали, либо по горизонтали, либо по диагонали, присваиваем ячейке c ранг 5*/
        if (((a == nolik && b == nolik) || (f == nolik && k == nolik) || (e == nolik && g == nolik)) && (c==pustaya)) {
            rating[0][2] = 5;
        }


        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки d
         */

        /* Если в одном ряду с ячейкой "d" есть Х по горизонтали, или вертикали,  "с" ранг -1 */
        if ((d == 'X' || e == 'X' || f == 'X') && (a == 'X' || d == 'X' || g == 'X')) {
            rating[1][0] = -1;
        }
        ;
        /* Если в одном ряду с ячейкой "d" есть Х по горизонтали или вертикали, присваиваем ячейке "d" ранг 1 */
        if (( e == 'X' || f == 'X') || (a == 'X' || g == 'X')) {
            rating[1][0] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "d" нет Х ни по горизонтали, ни по вертикали, присваиваем ячейке "d" ранг 2 */
        if (!(d == 'X' || e == 'X' || f == 'X') && !(a == 'X' || d == 'X' || g == 'X')) {
            rating[1][0] = 2;
        }
        /* Если в одном ряду с ячейкой "d" есть два Х по вертикали, либо по горизонтали, присваиваем ячейке d ранг 4*/
        if (((e == 'X' && f == 'X') || (a == 'X' && g == 'X')) && (d==pustaya))  {
            rating[1][0] = 4;
        }
        ;
        /* Если в одном ряду с ячейкой "d" есть два O по вертикали, либо по горизонтали, присваиваем ячейке d ранг 5*/
        if (((e == nolik && f == nolik) || (a == nolik && g == nolik))&& (d==pustaya))  {
            rating[1][0] = 5;
        }



        /*
         *   a b c
         *   d e f
         *   g h k
         * вычисляем рейтинг ячейки e
         */
        /* Если в одном ряду с ячейкой "e" есть Х по горизонтали и диагонали, но не по вертикали присваиваем ячейке e ранг 1 */
        if (!(e == 'X' || d == 'X' || f == 'X') && (b == 'X' || e == 'X' || h == 'X') && ((a == 'X' || e == 'X' || k == 'X') || (c == 'X' || e == 'X' || g == 'X'))) {
            rating[1][1] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "e" есть Х по горизонтали, вертикали и одной из диагоналей, присваиваем ячейке e ранг 1 */
        if ((e == 'X' || d == 'X' || f == 'X') && (b == 'X' || e == 'X' || h == 'X') && ((a == 'X' || e == 'X' || k == 'X') || (c == 'X' || e == 'X' || g == 'X')))  {
            rating[1][1] = 1;
        }
        /* Если в одном ряду с ячейкой "e" есть Х по диагонали и вертикали, но не по горизонтали, присваиваем ячейке e ранг 1 */
        if ((e == 'X' || d == 'X' || f == 'X') && !(b == 'X' || e == 'X' || h == 'X') && ((a == 'X' || e == 'X' || k == 'X') || (c == 'X' || e == 'X' || g == 'X'))) {
            rating[1][1] = 1;
        }
        /* Если в одном ряду с ячейкой "e" есть Х по горизонтали и вертикали, но не по диагонали, присваиваем ячейке e ранг 2 */
        if ((e == 'X' || d == 'X' || f == 'X') && (b == 'X' || e == 'X' || h == 'X') && !((a == 'X' || e == 'X' || k == 'X') || (c == 'X' || e == 'X' || g == 'X'))) {
            rating[1][1] = 2;
        }
        ;
        /* Если в одном ряду с ячейкой "e" есть Х по диагонали или вертикали,или по горизонтали, присваиваем ячейке e ранг 3 */
        if (((d == 'X' || f == 'X') || (b == 'X' || h == 'X') || (a == 'X'  || k == 'X') || (c == 'X' || g == 'X')) && (e == pustaya)){
            rating[1][1] = 3;
        }
        /* Если в одном ряду с ячейкой "e" есть два Х по диагонали, либо по вертикали, либо по горизонтали, присваиваем ячейке e ранг 4 */
        if (((d == 'X' && f == 'X') || (b == 'X' && h == 'X') || (a == 'X' && k == 'X') || (c == 'X' && g == 'X')) && (e == pustaya)) {
            rating[1][1] = 4;
        }

        /* Если в одном ряду с ячейкой "e" есть два O по диагонали, либо по вертикали, либо по горизонтали, присваиваем ячейке e ранг 5 */
        if (((d == nolik && f == nolik) || (b == nolik && h == nolik) || (a == nolik && k == nolik) || (c == nolik && g == nolik)) && (e == pustaya)) {
            rating[1][1] = 5;
        }


        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки f
         */


        /* Если в одном ряду с ячейкой "f" есть Х по горизонтали или вертикали, присваиваем ячейке "f" ранг 1 */
        if ((c == 'X' || k == 'X'|| f == 'X') || (d == 'X' || e == 'X' || f == 'X')) {
            rating[1][2] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "f" нет Х ни по горизонтали, ни по вертикали, присваиваем ячейке "f" ранг 2 */
        if (!(c == 'X' || f == 'X' || k == 'X') && !(d == 'X' || e == 'X' || f == 'X')) {
            rating[1][2] = 2;
        }
        ;

        /* Если в одном ряду с ячейкой "f" есть два Х по горизонтали, или по вертикали,  "f" ранг 4 */
        if (((c == 'X' && k == 'X') || (d == 'X' && e == 'X')) && (f == pustaya)) {
            rating[1][2] = 4;
        }
        /* Если в одном ряду с ячейкой "f" есть два O по горизонтали, или по вертикали,  "f" ранг 5 */
        if (((c == nolik && k == nolik) || (d == nolik && e == nolik)) && (f==pustaya))  {
            rating[1][2] = 5;
        }
        /* Если в одном ряду с ячейкой "f" есть Х и по горизонтали, и по вертикали, присваиваем ячейке "f" ранг -1 */
        if ((c == 'X' || k == 'X' || f == 'X') && (d == 'X' || e == 'X' || f == 'X')) {
            rating[1][2] = -1;
        }
        ;


        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки g
         */

        /* Если в одном ряду с ячейкой "g" есть Х по горизонтали, вертикали и диагонали, присваиваем ячейке a ранг -1 */
        if ((g == 'X' || h == 'X' || k == 'X') && (a == 'X' || d == 'X' || g == 'X') && (g == 'X' || e == 'X' || c == 'X')) {
            rating[2][0] = -1;
        }
        ;
        /* Если в одном ряду с ячейкой "g" есть Х по горизонтали и вертикали, но не по диагонали, присваиваем ячейке a ранг 1 */
        if ((g == 'X' || h == 'X' || k == 'X') && (a == 'X' || d == 'X' || g == 'X') && !(g == 'X' || e == 'X' || c == 'X')) {
            rating[2][0] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "g" есть Х по горизонтали и диагонали, но не по вертикали присваиваем ячейке a ранг 1 */
        if ((g == 'X' || h == 'X' || k == 'X') && !(a == 'X' || d == 'X' || g == 'X') && (g == 'X' || e == 'X' || c == 'X')) {
            rating[2][0] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "g" есть Х по диагонали и вертикали, но не по горизонтали, присваиваем ячейке a ранг 1 */
        if (!(g == 'X' || h == 'X' || k == 'X') && (a == 'X' || d == 'X' || g == 'X') && (g == 'X' || e == 'X' || c == 'X')) {
            rating[2][0] = 1;
        }
        /* Если в одном ряду с ячейкой "g" есть Х по диагонали или вертикали, или по горизонтали, присваиваем ячейке a ранг 2 */
        if ((( h == 'X' || k == 'X') || (a == 'X' || d == 'X' ) || ( e == 'X' || c == 'X'))&& (g == pustaya))  {
            rating[2][0] = 2;
        }
        /* Если в одном ряду с ячейкой "g" нет Х ни по диагонали ни по вертикали, ни по по горизонтали, присваиваем ячейке a ранг 3 */
        if ((!(g == 'X' || h == 'X' || k == 'X') && !(a == 'X' || d == 'X' || g == 'X') && !(g == 'X' || e == 'X' || c == 'X'))&& (g == pustaya)) {
            rating[2][0] = 3;
        }
        /* Если в одном ряду с ячейкой "g" есть два Х по диагонали, или вертикали, или по горизонтали, присваиваем ячейке a ранг 4 */
        if (((h == 'X' && k == 'X') || (a == 'X' && d == 'X' ) || ( e == 'X' && c == 'X'))&& (g == pustaya)) {
            rating[2][0] = 4;
        }
        /* Если в одном ряду с ячейкой "g" есть два O по диагонали, или вертикали, или по горизонтали, присваиваем ячейке a ранг 4 */
        if (((h == nolik && k == nolik) || (a == nolik && d == nolik ) || ( e == nolik && c == nolik)) && (g == pustaya)) {
            rating[2][0] = 5;
        }

        ;

        ;







        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки h
         */

    /* Если в одном ряду с ячейкой "h" есть Х по горизонтали или вертикали,  "h" ранг 1 */
        if ((g == 'X' || k == 'X') || (b == 'X' || e == 'X')) {
            rating[2][1]=1;
        }
        /* Если в одном ряду с ячейкой "h" есть Х по горизонтали, и вертикали,  "h" ранг -1 */
        if ((g == 'X' || h == 'X' || k == 'X') && (b == 'X' || e == 'X' || h == 'X')) {
            rating[2][1] = -1;

        }
        /* Если в одном ряду с ячейкой "h" нет Х ни по горизонтали, ни по вертикали, присваиваем ячейке "h" ранг 2 */
        if (!(g == 'X' || h == 'X' || k == 'X') && !(b == 'X' || e == 'X' || h == 'X')) {
            rating[2][1] = 2;
        }
        ;


        /* Если в одном ряду с ячейкой "h" есть два Х по горизонтали, или вертикали,  "h" ранг 4 */
        if (((g == 'X' && k == 'X') || (b == 'X' && e == 'X'))&& (h == pustaya)) {
            rating[2][1] = 4;
        }
        /* Если в одном ряду с ячейкой "h" есть два O по горизонтали, или вертикали,  "h" ранг 5 */
        if (((g == nolik && k == nolik) || (b == nolik && e == nolik)) && (h == pustaya)){
            rating[2][1] = 5;
        }

        ;


        /*
         *   a b c
         *   d e f
         *   g h k
         *  вычисляем рейтинг ячейки k
         */



        ;
        /* Если в одном ряду с ячейкой "k" есть Х по горизонтали и вертикали, но не по диагонали, присваиваем ячейке k ранг 1 */
        if ((g == 'X' || h == 'X' || k == 'X') && (c == 'X' || f == 'X' || k == 'X') && !(a == 'X' || e == 'X' || k == 'X')) {
            rating[2][2] = 1;
        }

        /* Если в одном ряду с ячейкой "k" есть Х по диагонали или вертикали, или по горизонтали, присваиваем ячейке k ранг 2 */
        if ((g == 'X' || h == 'X' ) || (c == 'X' || f == 'X') || (a == 'X' || e == 'X' )) {
            rating[2][2] = 1;
        }


        /* Если в одном ряду с ячейкой "k" есть Х по горизонтали и диагонали, но не по вертикали присваиваем ячейке k ранг 1 */
        if ((g == 'X' || h == 'X' || k == 'X') && !(c == 'X' || f == 'X' || k == 'X') && (a == 'X' || e == 'X' || k == 'X')) {
            rating[2][2] = 1;
        }
        ;
        /* Если в одном ряду с ячейкой "k" есть Х по диагонали и вертикали, но не по горизонтали, присваиваем ячейке k ранг 1 */
        if (!(g == 'X' || h == 'X' || k == 'X') && (c == 'X' || f == 'X' || k == 'X') && (a == 'X' || e == 'X' || k == 'X')) {
            rating[2][2] = 1;
        }



        ;
        /* Если в одном ряду с ячейкой "k" нет Х ни по диагонали ни по вертикали, ни по по горизонтали, присваиваем ячейке k ранг 3 */
        if ((!(g == 'X' || h == 'X' || k == 'X') && !(c == 'X' || f == 'X' || k == 'X') && !(a == 'X' || e == 'X' || k == 'X')) && (k == pustaya)) {
            rating[2][2] = 3;
            };

        /* Если в одном ряду с ячейкой "k" есть два Х по диагонали, или вертикали, или по горизонтали, присваиваем ячейке k ранг 4 */
        if (((g == 'X' && h == 'X' ) || (c == 'X' && f == 'X' ) || (a == 'X' && e == 'X'))&& (k == pustaya)) {
            rating[2][2] = 4;
        }
        /* Если в одном ряду с ячейкой "k" есть два O по диагонали, или вертикали, или по горизонтали, присваиваем ячейке k ранг 5 */
        if ((((g == nolik && h == nolik ) || (c == nolik && f == nolik ) || (a == nolik && e == nolik))) && (k == pustaya)) {
            rating[2][2] = 5;
        }

        /* Если в одном ряду с ячейкой "k" есть Х по горизонтали, вертикали и диагонали, присваиваем ячейке k ранг -1 */
        if ((g == 'X' || h == 'X' || k == 'X') && (c == 'X' || f == 'X' || k == 'X') && (a == 'X' || e == 'X' || k == 'X')) {
            rating[2][2] = -1;
        }




 /* вспомогательный код - вывод рейтинга ячеек массива       for (int i = 0; i < razmer; i++) {
            for (int j = 0; j < razmer; j++) {
                System.out.print("rating " + i + j+ " =" + rating[i][j]+ " ;");
            }
            System.out.println();
        } */


return  rating;


        };

    private static boolean proverka_na_validnost(int x, int y) {
            boolean result=true;
            if (x<0 || x>razmer || y<0 || y>razmer)   {System.out.println("Вы ввели некорректные значения. Повторите ввод"); result=false;} else if (pole_igry[y][x] != pustaya)   {
                System.out.println("Эта ячейка уже содержит " + pole_igry[y][x] + ". Повторите ввод");
                result=false;
            };
// Кто дочитал до конца и разобрался в коде, тот большой молодец! Ура!
          return result;
    }
}
